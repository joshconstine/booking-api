package home

import (
    "strconv"

	"booking-api/data/response"

	"booking-api/data/request"
    "booking-api/view/ui"
	"fmt"
)

type RentalFormParams struct {
RentalID uint
Name string
Description string
Bedrooms int
Bathrooms float64
Success bool
Amenities []response.AmenityResponse
}

type RentalFormErrors struct {
Name string
Description string
Bedrooms string
Bathrooms string
}

func  CreateRentalUpdateUrl(id uint) string {
    return "/rentals/" + strconv.Itoa(int(id))
}
func contains(s []response.AmenityResponse, e int) bool {
    for _, a := range s {
        if int(a.ID) == e {
            return true
        }
    }
    return false
}

func getIsChecked(b bool) string {
    if b {
        return "checked"
    }
    return ""
}

templ RentalForm(params request.CreateRentalStep1Params, errors request.CreateRentalStep1Errors, amenities []response.SortedAmenityResponse, photos []response.EntityPhotoResponse) {
   <form

   hx-put={CreateRentalUpdateUrl(params.RentalID)}
   hx-swap="outerHTML"
   hx-indicator="#loading"
   class="flex flex-col gap-4 w-full"
   >

       @ui.EntityPhotoList(photos)
       <div

   class="flex flex-col gap-4 w-full max-w-screen-3xl mx-auto p-4 shadow-lg rounded-lg"
   >
        <div class="bg-white shadow-lg flex-col flex gap-2 p-8 max-w-screen-md w-full mx-auto rounded-lg">
            <div class="w-full justify-between flex">
                <h2 class="text-xl font-bold">Rental information</h2>
                <span class="text-gray-500 text-sm">information can be changed later</span>
            </div>
             <div class="flex flex-col gap-2 w-full">
                <label for="name" class="font-semibold">
                   Rental Name
                </label>
                <input type="text" name="name" id="name" value={params.Name} required class="input input-bordered" />
                if len(errors.Name) > 0 {
                    <div class="text-sm text-error mt-1">{ errors.Name }</div>
                }
            </div>
            <div class="flex flex-col gap-2 w-full">
                <label for="address" class="font-semibold">
                   Address
                </label>
                <input type="text" name="address" value={params.Address} id="address" required class="input input-bordered" />
                if len(errors.Address) > 0 {
                    <div class="text-sm text-error mt-1">{ errors.Address }</div>
                }
            </div>
            <div class="w-full flex justify-between flex-col md:flex-row gap-20">
                  <div class="flex flex-col gap-2 w-full">
                    <label for="bedrooms" class="font-semibold">
                      Number of bedrooms
                    </label>
                    <input type="text" name="bedrooms" value={strconv.Itoa(int(params.Bedrooms))} id="bedrooms" required class="input input-bordered" />
                    if len(errors.Bedrooms) > 0 {
                        <div class="text-sm text-error mt-1">{ errors.Bedrooms }</div>
                    }
                  </div>

                  <div class="flex flex-col gap-2 w-full">
                    <label for="bathrooms" class="font-semibold">
                      Number of bathrooms
                    </label>
                    <input type="text" name="bathrooms" value={fmt.Sprintf("%.1f", params.Bathrooms)}id="bathrooms" required class="input input-bordered" />
                    if len(errors.Bathrooms) > 0 {
                        <div class="text-sm text-error mt-1">{ errors.Bathrooms }</div>
                    }
                  </div>
            </div>
            <div class="w-full flex justify-between flex-col md:flex-row gap-20">
                  <div class="flex flex-col gap-2 w-full">
                    <label for="guests" class="font-semibold">
                      How many guests?
                    </label>
                    <input type="text" name="guests" id="guests" value={strconv.Itoa(int(params.Guests))} required class="input input-bordered" />
                    if len(errors.Guests ) > 0 {
                        <div class="text-sm text-error mt-1">{ errors.Guests }</div>
                    }
                  </div>

                  <div class="flex flex-col gap-1 w-full">
                    <label for="allowInstantBooking" class="font-semibold">
                         How will you confirm bookings?
                    </label>
                    //radio group , Instantbooking , Accept/decline requests
                    <div class="flex gap-2 items-center">
                        if params.AllowInstantBooking {
                            <input type="radio" name="allowInstantBooking" id="allowInstantBooking" value="checked" required class="radio radio-sm" checked />
                        } else {
                            <input type="radio" name="allowInstantBooking" id="allowInstantBooking"  required class="radio radio-sm" />
                        }
                        <label for="allowInstantBooking">Instant booking</label>
                    </div>
                    <div class="flex gap-2 items-center">

                           if !params.AllowInstantBooking {
                            <input type="radio" name="allowInstantBooking" id="acceptDecline" value="checked" required class="radio radio-sm" checked />
                        } else {
                            <input type="radio" name="allowInstantBooking" id="acceptDecline" required class="radio radio-sm" />
                        }
                        <label for="acceptDecline">Accept/decline requests</label>
                    </div>

                  </div>
            </div>
             <div class="w-full flex justify-between flex-col md:flex-row gap-20">
                  <div class="flex flex-col gap-2 w-full">
                    <label for="allowPets" class="font-semibold">
                        Are pets allowed?
                    </label>
                      <div class="flex flex-col gap-1 w-full">
                        //radio group , Instantbooking , Accept/decline requests
                        <div class="flex gap-2 items-center">
                            if params.AllowPets {
                                <input type="radio" name="allowPets" id="allowPets" value="checked" required class="radio radio-sm" checked />
                            } else {
                                <input type="radio" name="allowPets" id="allowPets" required class="radio radio-sm" />
                            }
                            <label for="allowPets">Yes</label>
                        </div>
                        <div class="flex gap-2 items-center">
                            if !params.AllowPets {
                                <input type="radio" name="allowPets" id="allowPetsNo" value="checked" required class="radio  radio-sm" checked />
                            } else {
                                <input type="radio" name="allowPets" id="allowPetsNo" required class="radio  radio-sm" />
                            }
                            <label for="allowPetsNo">No</label>
                        </div>

                      </div>
                  </div>

                  <div class="flex flex-col gap-1 w-full">
                    <label for="parentProperty" class="font-semibold">
                         Is this rental a part of a larger properties with multiple
                        rentals?
                    </label>
                    //radio group , Instantbooking , Accept/decline requests
                    <div class="flex gap-2 items-center">
                        if params.ParentProperty {
                            <input type="radio" name="parentProperty" id="parentProperty" value="checked" required class="radio radio-sm" checked />
                        } else {
                            <input type="radio" name="parentProperty" id="parentProperty" required class="radio radio-sm" />
                        }
                        <label for="parentProperty">Yes</label>
                    </div>
                    <div class="flex gap-2 items-center">
                        if !params.ParentProperty {
                            <input type="radio" name="parentProperty" id="parentPropertyNo" value="checked" required class="radio radio-sm" checked />
                        } else {
                            <input type="radio" name="parentProperty" id="parentPropertyNo" required class="radio radio-sm" />
                        }
                        <label for="parentPropertyNo">No</label>
                    </div>

                  </div>
            </div>
                  <div class="flex flex-col gap-1 w-full">
                    <label for="description" class="font-semibold">

                            Description
                    </label>
                    <textarea
                    rows="6"
                    name="description"
                    class="textarea textarea-bordered w-full "
                    >
                        {params.Description}
                      </textarea>
                      if len(errors.Description ) > 0 {
                        <div class="text-sm text-error mt-1">{ errors.Description }</div>
                    }
                   </div>

        </div>
        <div class="bg-white shadow-lg flex-col flex gap-2 p-8 max-w-screen-md w-full mx-auto rounded-lg">
             <h2 class="text-xl font-bold">Ammenities</h2>
             <div class="w-full flex gap-16 flex-wrap">
              <div class="flex gap-4 flex-wrap w-full">
                  for _, amenityType := range amenities {
                  <div class="flex flex-col  gap-1">
                     <h2 class=" font-semibold ">{ amenityType.TypeName }</h2>
                     <div class="flex flex-col gap-1 w-full">
                         for _, amenity := range amenityType.Amenities {
                             <div class="flex items-center">
                             if contains(params.Amenities, int(amenity.ID))  {

                                <input
                                type="checkbox"
                                name={ GetAmenityId(amenity) }

                                class="checkbox checkbox-sm"
                                value={ strconv.Itoa(int(amenity.ID)) }
                              checked
                                />
                                } else {

                                <input
                                type="checkbox"
                                name={ GetAmenityId(amenity) }

                                class="checkbox checkbox-sm"
                                value={ strconv.Itoa(int(amenity.ID)) }
                                />
                                }
                                <label for="amenities" class="">
                                    { amenity.Name }
                                </label>
                             </div>
                         }
                     </div>
                  </div>
                  }
               </div>
             </div>
        </div>
        <div class=" flex justify-between  max-w-screen-md w-full mx-auto ">
            <div class="flex gap-4">
                <button type="button" class="btn" ><i class="fa-regular fa-trash text-red-600"></i>Delete listing</button>
                <button type="reset" class="btn" >Reset</button>
            </div>
            <div class="flex gap-4">
                <span id="loading" class="loading loading-dots loading-md htmx-indicator"></span>
                <button class="btn bg-white">Save changes to draft</button>
                <button class="btn bg-white">Save</button>


            </div>
        </div>
</div>
</form>
}
