package auth

import (
   supabase "github.com/nedpals/supabase-go"
	"booking-api/view/layout"
)

templ AccountSetup() {
	@layout.App(true) {
		<div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
			<h1 class="text-xl font-black mb-8 text-center">Setup your account</h1>
			@AccountSetupForm(AccountSetupParams{}, AccountSetupErrors{})
		</div>
	}
}

type AccountSetupErrors struct {
	Username string
}

type AccountSetupParams struct {
	Username string
	FirstName string
	LastName string
	PhoneNumber string
	
}

templ AccountSetupForm(parmas AccountSetupParams, errors AccountSetupErrors) {
	<form
		hx-post="/account/setup"
		hx-swap="outerHTML"
	>
		<label class="form-control w-full max-w-xs">
			<div class="label">
				<span class="label-text">Enter your username</span>
			</div>
			<input class="input input-bordered" type="text" name="username"/>
			<div class="label">
				if len(errors.Username) > 0 {
					<span class="label-text text-error">{ errors.Username }</span>
				}
			</div>

		</label>
		<label class="form-control w-full max-w-xs">
			<div class="label">
				<span class="label-text">Enter your first name</span>
			</div>
			<input class="input input-bordered" type="text" name="firstName"/>
		</label>
		<label class="form-control w-full max-w-xs">
			<div class="label">
				<span class="label-text">Enter your last name</span>
			</div>
			<input class="input input-bordered" type="text" name="lastName"/>
		</label>

		<label class="form-control w-full max-w-xs">
			<div class="label">
				<span class="label-text">Enter your phone number</span>
			</div>
			<input class="input input-bordered" type="text" name="phoneNumber"/>
		</label>

		
		<button class="btn btn-primary">setup account <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ Login() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to Enigma bookings</h1>
				@LoginForm(supabase.UserCredentials{}, LoginErrors{})
			</div>
		</div>
	}
}

templ Signup() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Signup to dreapicai</h1>
				@SignupForm(SignupParams{}, SignupErrors{})
			</div>
		</div>
	}
}

templ SignupSuccess(email string) {
	<div>A confirmation email has been sent to: <span class="font-semibold text-success">{ email }</span></div>
}

type SignupParams struct {
	Email           string
	Password        string
	ConfirmPassword string
}

type SignupErrors struct {
	Email           string
	Password        string
	ConfirmPassword string
}

templ SignupForm(params SignupParams, errors SignupErrors) {
	<form
		hx-post="/signup"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={ params.Email } name="email" autocomplete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required autocomplete="off" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Confirm Password</span>
			</div>
			<input type="password" name="confirmPassword" required autocomplete="off" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.ConfirmPassword }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-primary w-full">login <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

type LoginErrors struct {
	Email              string
	Password           string
	InvalidCredentials string
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
	<form
		hx-post="/login"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={ creds.Email } name="email" autocomplete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-primary w-full">login <i class="fa-solid fa-arrow-right"></i></button>
		<div class="divider">OR</div>
		<a href="/login/provider/google" class="btn btn-outline w-full">login with Google <i class="fa-brands fa-google"></i></a>
	</form>
}

templ MagicLinkSuccess(email string) {
	<div>An email to log you in has been sent to <span class="text-info">{ email }</span></div>
}

templ CallbackScript() {
	<script>
		var url = window.location.href;
		var newURL = url.replace("#", "?")
		window.location = newURL
	</script>
}